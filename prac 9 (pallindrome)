#include <iostream>
#include <bits/stdc++.h>
using namespace std;

class Stack {
    char a[500];
    int top, len;

public:
    Stack() {
        top = -1;
    }

    void createStack(string str);
    void push(char a[], char c);
    void displayOriginal();
    void displayReverse();
    void palindrome();
};

void Stack::createStack(string str) {
    len = str.size();
    for (int i = 0; i < len; i++) {
        push(a, str[i]);
    }
    a[len] = '\0';
}

void Stack::push(char a[], char c) {
    cout << "Pushing element " << c << " in stack " << endl;
    top++;
    a[top] = c;
    return;
}

void Stack::displayOriginal() {
    int i = 0;
    while (a[i] != '\0') {
        cout << a[i] << " ";
        i++;
    }
    cout << endl;
}

void Stack::displayReverse() {
    int i = len - 1;
    while (i >= 0) {
        cout << a[i] << " ";
        i--;
    }
    cout << endl;
}

void Stack::palindrome() {
    for (int i = 0; i < len; i++) {
        if (a[i] != a[len - 1 - i]) {
            cout << "Not palindrome " << endl;
            return;
        }
    }

    cout << "Palindrome " << endl;
    return;
}

int main() {
    Stack s;
    string n;
    cout << "Enter string : ";
    getline(cin, n);

    bool flag = true;
    while (flag) {
        int ch;
        cout << "\nChoices : " << endl;
        cout << "1. Create stack\n2. Display Original stack\n3. Display reverse stack\n4. Check palindrome\n5. Exit" << endl;
        cout << "Enter your choices : ";
        cin >> ch;

        switch (ch) {
            case 1:
                s.createStack(n);
                break;
            case 2:
                s.displayOriginal();
                break;
            case 3:
                s.displayReverse();
                break;
            case 4:
                s.palindrome();
                break;
            case 5:
                cout << "Program end !!" << endl;
                flag = false;
                break;
            default:
                cout << "Invalid choice! Please try again." << endl;
                break;
        }
    }
}
